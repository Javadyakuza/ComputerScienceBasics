import{_ as e,o as t,c as s,R as r}from"./chunks/framework.OwEraUkW.js";const h=JSON.parse('{"title":"Operating Systems: A Structured Overview","description":"","frontmatter":{},"headers":[],"relativePath":"src/General/os.md","filePath":"src/General/os.md"}'),n={name:"src/General/os.md"},o=r('<h1 id="operating-systems-a-structured-overview" tabindex="-1">Operating Systems: A Structured Overview <a class="header-anchor" href="#operating-systems-a-structured-overview" aria-label="Permalink to &quot;Operating Systems: A Structured Overview&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction: <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction:&quot;">​</a></h2><p>Operating systems are core software programs that manage computer hardware resources and provide a platform for running applications. They act as intermediaries between users and hardware, translating user commands into instructions the hardware can understand.</p><h2 id="historical-context" tabindex="-1">Historical Context: <a class="header-anchor" href="#historical-context" aria-label="Permalink to &quot;Historical Context:&quot;">​</a></h2><p>Before operating systems, humans interacted directly with computers, feeding them individual program instructions. This limited computers to running only one program at a time. The development of operating systems enabled users to submit batch jobs, allowing the OS to handle multiple programs sequentially.</p><h2 id="operating-system-functions" tabindex="-1">Operating System Functions: <a class="header-anchor" href="#operating-system-functions" aria-label="Permalink to &quot;Operating System Functions:&quot;">​</a></h2><ul><li><strong>Hardware Management:</strong> Controls and allocates hardware resources like memory, CPU, and I/O devices.</li><li><strong>Resource Sharing:</strong> Enables multiple applications to share hardware resources efficiently.</li><li><strong>Process Management:</strong> Creates, schedules, and terminates processes, ensuring smooth program execution.</li><li><strong>Memory Management:</strong> Allocates and manages memory space for applications and system processes.</li><li><strong>File Management:</strong> Organizes and provides access to data stored on storage devices.</li><li><strong>Security:</strong> Protects the system from unauthorized access and malicious activities.</li><li><strong>User Interface:</strong> Provides a platform for users to interact with the system and applications.</li></ul><h2 id="types-of-operating-systems" tabindex="-1">Types of Operating Systems: <a class="header-anchor" href="#types-of-operating-systems" aria-label="Permalink to &quot;Types of Operating Systems:&quot;">​</a></h2><ul><li><strong>Batch:</strong> Processes jobs in batches without user intervention.</li><li><strong>Time-Sharing:</strong> Allows multiple users to share a single computer concurrently.</li><li><strong>Distributed:</strong> Runs on multiple interconnected computers, coordinating their activities.</li><li><strong>Network:</strong> Provides network services and communication facilities.</li><li><strong>Real-Time:</strong> Responds to events and controls processes within strict time constraints.</li><li><strong>Multiprogramming:</strong> Enables the execution of multiple programs simultaneously.</li><li><strong>Multitasking:</strong> Allows users to work on multiple tasks concurrently.</li></ul><h2 id="kernel" tabindex="-1">Kernel: <a class="header-anchor" href="#kernel" aria-label="Permalink to &quot;Kernel:&quot;">​</a></h2><p>The kernel is the core component of an operating system, acting as the bridge between hardware and other software layers. It performs essential tasks like:</p><ul><li><strong>Device Management:</strong> Communicates directly with hardware devices and translates user requests.</li><li><strong>Memory Management:</strong> Allocates and manages memory for different processes and system functions.</li><li><strong>Process Management:</strong> Schedules and controls the execution of processes.</li></ul><p><strong>Types of Kernels:</strong></p><ul><li><strong>Monolithic:</strong> Combines all operating system functionality into a single, large kernel. (e.g., Linux)</li><li><strong>Micro-kernel:</strong> Provides only essential services in the core and relies on user-space modules for additional functionality. (e.g., Mach)</li><li><strong>Hybrid:</strong> Combines elements of both monolithic and micro-kernel architectures. (e.g., Windows NT kernel)</li></ul><h2 id="operating-system-examples" tabindex="-1">Operating System Examples: <a class="header-anchor" href="#operating-system-examples" aria-label="Permalink to &quot;Operating System Examples:&quot;">​</a></h2><ul><li><strong>Linux:</strong> Popular open-source OS for various platforms.</li><li><strong>Windows:</strong> Widely used commercial OS for personal computers.</li><li><strong>macOS:</strong> Apple&#39;s proprietary OS for Macintosh computers.</li><li><strong>Android:</strong> Mobile OS based on Linux, used in smartphones and tablets.</li><li><strong>iOS:</strong> Apple&#39;s mobile OS for iPhones and iPads.</li></ul>',16),a=[o];function i(l,c,m,d,u,g){return t(),s("div",null,a)}const f=e(n,[["render",i]]);export{h as __pageData,f as default};
